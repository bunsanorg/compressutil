// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/bunsanorg/compressutil (interfaces: Archiver,CurrentDirArchiver)

package mock_compressutil

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Archiver interface
type MockArchiver struct {
	ctrl     *gomock.Controller
	recorder *_MockArchiverRecorder
}

// Recorder for MockArchiver (not exported)
type _MockArchiverRecorder struct {
	mock *MockArchiver
}

func NewMockArchiver(ctrl *gomock.Controller) *MockArchiver {
	mock := &MockArchiver{ctrl: ctrl}
	mock.recorder = &_MockArchiverRecorder{mock}
	return mock
}

func (_m *MockArchiver) EXPECT() *_MockArchiverRecorder {
	return _m.recorder
}

func (_m *MockArchiver) Pack(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Pack", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockArchiverRecorder) Pack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pack", arg0, arg1)
}

func (_m *MockArchiver) PackContents(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "PackContents", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockArchiverRecorder) PackContents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PackContents", arg0, arg1)
}

func (_m *MockArchiver) Unpack(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Unpack", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockArchiverRecorder) Unpack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unpack", arg0, arg1)
}

// Mock of CurrentDirArchiver interface
type MockCurrentDirArchiver struct {
	ctrl     *gomock.Controller
	recorder *_MockCurrentDirArchiverRecorder
}

// Recorder for MockCurrentDirArchiver (not exported)
type _MockCurrentDirArchiverRecorder struct {
	mock *MockCurrentDirArchiver
}

func NewMockCurrentDirArchiver(ctrl *gomock.Controller) *MockCurrentDirArchiver {
	mock := &MockCurrentDirArchiver{ctrl: ctrl}
	mock.recorder = &_MockCurrentDirArchiverRecorder{mock}
	return mock
}

func (_m *MockCurrentDirArchiver) EXPECT() *_MockCurrentDirArchiverRecorder {
	return _m.recorder
}

func (_m *MockCurrentDirArchiver) PackFrom(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "PackFrom", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCurrentDirArchiverRecorder) PackFrom(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PackFrom", arg0, arg1, arg2)
}

func (_m *MockCurrentDirArchiver) Unpack(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Unpack", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCurrentDirArchiverRecorder) Unpack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unpack", arg0, arg1)
}
